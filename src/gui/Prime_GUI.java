/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.Color;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.JTextField;
import prime.PrimeFactorFinder;

/**
 * @author Alex McWhae adapted from elau's TriangleApp
 * @author elau
 */
public class Prime_GUI extends javax.swing.JFrame {

    public static final String EMPTY_STRING = "";

    public static final String INITIAL_INVALID_LENGTH_INPUT = "\">1\"";

    public static final String VALID_INPUT_MSG = "Got a valid number!";

    public static final String INVALID_INPUT_MSG = "*Please enter a valid integer!";

    public static final String FORM_TRIANGLE_INIT_STR = "Yes / No";

    public static final String TRIANGLE_TYPE_INIT_STR = "Unknown";

    public static final String INPUT_FIELD_NAME = "inputField_Name";

    public static final String INPUT_MSG_LABEL_NAME = "inputMsgLabel_Name";

    public static final String CALCULATE_BUTTON_NAME = "calculateButton_Name";

    public static final String RESET_BUTTON_NAME = "resetButton_Name";

    public static final String IS_PRIME_FIELD_NAME = "isPrimeField_Name";

    public static final String PRIME_FACTORS_FIELD_NAME = "primeFactorsField_Name";

    /**
     * Creates new form TriClass_GUI
     */
    public Prime_GUI() {
        inputFactor = -1;

        initComponents();
        inputNumberMsgLabel.setVisible(false);
        calculatePrimeButton.setEnabled(false);
        resetButton.setEnabled(false);

        isPrimeLabel.setEnabled(false);
        isPrimeField.setEnabled(false);
        isPrimeField.setEditable(false);

        primeFactorsLabel.setEnabled(false);
        primeFactorsField.setEnabled(false);
        primeFactorsField.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TriClass_GUI_Frame = new javax.swing.JFrame();
        jLabel1 = new javax.swing.JLabel();
        firstLabel = new javax.swing.JLabel();
        inputNumberField = new javax.swing.JTextField();
        calculatePrimeButton = new javax.swing.JButton();
        isPrimeLabel = new javax.swing.JLabel();
        primeFactorsLabel = new javax.swing.JLabel();
        isPrimeField = new javax.swing.JTextField();
        primeFactorsField = new javax.swing.JTextField();
        resetButton = new javax.swing.JButton();
        inputNumberMsgLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        TriClass_GUI_Frame.setTitle("TriClass_GUIApp");

        javax.swing.GroupLayout TriClass_GUI_FrameLayout = new javax.swing.GroupLayout(TriClass_GUI_Frame.getContentPane());
        TriClass_GUI_Frame.getContentPane().setLayout(TriClass_GUI_FrameLayout);
        TriClass_GUI_FrameLayout.setHorizontalGroup(
            TriClass_GUI_FrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        TriClass_GUI_FrameLayout.setVerticalGroup(
            TriClass_GUI_FrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Prime Factor Calculator");
        setResizable(false);

        firstLabel.setText("Number");

        inputNumberField.setColumns(8);
        inputNumberField.setText("\">1\"");
        inputNumberField.setName(Prime_GUI.INPUT_FIELD_NAME);
        inputNumberField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                inputNumberFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                inputNumberFieldFocusLost(evt);
            }
        });
        inputNumberField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputActionPerformed(evt);
            }
        });
        inputNumberField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inputNumberFieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                inputNumberFieldKeyTyped(evt);
            }
        });

        calculatePrimeButton.setText("Calculate");
        calculatePrimeButton.setName(Prime_GUI.CALCULATE_BUTTON_NAME);
        calculatePrimeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculatePrimeButtonActionPerformed(evt);
            }
        });

        isPrimeLabel.setText("Prime Number");
        isPrimeLabel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                isPrimeLabelComponentHidden(evt);
            }
        });

        primeFactorsLabel.setText("Prime Factors");

        isPrimeField.setEditable(false);
        isPrimeField.setColumns(5);
        isPrimeField.setText("Yes / No");
        isPrimeField.setName(Prime_GUI.IS_PRIME_FIELD_NAME);
        isPrimeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isPrimeFieldActionPerformed(evt);
            }
        });

        primeFactorsField.setEditable(false);
        primeFactorsField.setColumns(15);
        primeFactorsField.setText("Unknown");
        primeFactorsField.setName(Prime_GUI.PRIME_FACTORS_FIELD_NAME);

        resetButton.setText("Reset");
        resetButton.setName(Prime_GUI.RESET_BUTTON_NAME);
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        inputNumberMsgLabel.setForeground(new java.awt.Color(255, 0, 0));
        inputNumberMsgLabel.setText("*Please enter a positive integer");
        inputNumberMsgLabel.setName(Prime_GUI.INPUT_MSG_LABEL_NAME);

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel2.setText("Prime Factor Calculator");

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("Please enter a number, between 2 and 2,000,000,000 to determine whether the number is a prime and if not calculate it's prime factors.");
        jTextArea1.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(isPrimeLabel)
                            .addComponent(primeFactorsLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(isPrimeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(primeFactorsField)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(calculatePrimeButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(resetButton))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(firstLabel)
                                .addGap(21, 21, 21)
                                .addComponent(inputNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(27, 27, 27)
                        .addComponent(inputNumberMsgLabel))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 467, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstLabel)
                    .addComponent(inputNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputNumberMsgLabel))
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(calculatePrimeButton)
                    .addComponent(resetButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(isPrimeLabel)
                    .addComponent(isPrimeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(primeFactorsLabel)
                    .addComponent(primeFactorsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(101, Short.MAX_VALUE))
        );

        isPrimeLabel.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputActionPerformed
        inputFactor = this.textFieldActionPerformed(inputNumberField, inputNumberMsgLabel);

        this.enableCheckButton();
    }//GEN-LAST:event_inputActionPerformed


    private void calculatePrimeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculatePrimeButtonActionPerformed
        while (inputFactor == -1) {
            inputFactor = this.textFieldActionPerformed(inputNumberField, inputNumberMsgLabel);
        }
        inputNumberField.setEditable(false);

        // input is valid
        // enable the relevant field 
        isPrimeLabel.setEnabled(true);
        isPrimeField.setEnabled(true);

        try {
            PrimeFactorFinder primeFactorFinder = new PrimeFactorFinder(inputFactor);
            primeFactorFinder.CalculatePrimeFactors();
            if (primeFactorFinder.getIsPrime()) {
                isPrimeField.setText("Yes");
                isPrimeField.setEditable(false);
            } else {
                isPrimeField.setText("No");
                isPrimeField.setEditable(false);
                String factors = primeFactorFinder.getResultString();

                primeFactorsLabel.setEnabled(true);

                primeFactorsField.setText(factors);
                primeFactorsField.setEnabled(true);
                primeFactorsField.setEditable(false);
            }
        } catch (Exception e) {
            showMessageDialog(TriClass_GUI_Frame, e.getMessage(), "Error", ERROR_MESSAGE);
        }

        calculatePrimeButton.setEnabled(false);
        resetButton.setEnabled(true);
    }//GEN-LAST:event_calculatePrimeButtonActionPerformed

    private void isPrimeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isPrimeFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_isPrimeFieldActionPerformed

    private void isPrimeLabelComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_isPrimeLabelComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_isPrimeLabelComponentHidden

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        // TODO add your handling code here:
        this.resetInitialStatus();
    }//GEN-LAST:event_resetButtonActionPerformed

    private void inputNumberFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_inputNumberFieldFocusLost
        this.inputActionPerformed(null);
    }//GEN-LAST:event_inputNumberFieldFocusLost

    private void inputNumberFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_inputNumberFieldFocusGained
        this.textFieldFocusGained(inputNumberField, inputFactor);
    }//GEN-LAST:event_inputNumberFieldFocusGained

    private void inputNumberFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputNumberFieldKeyTyped

    }//GEN-LAST:event_inputNumberFieldKeyTyped

    private void inputNumberFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputNumberFieldKeyReleased
        this.inputActionPerformed(null);
    }//GEN-LAST:event_inputNumberFieldKeyReleased

    private void resetInitialStatus() {
        inputFactor = -1;

        resetTextField(inputNumberField);

        resetErrMsgLabel(inputNumberMsgLabel);

        calculatePrimeButton.setEnabled(false);

        resetButton.setEnabled(false);

        isPrimeLabel.setEnabled(false);
        isPrimeField.setText(FORM_TRIANGLE_INIT_STR);
        isPrimeField.setEnabled(false);

        primeFactorsLabel.setEnabled(false);
        primeFactorsField.setText(TRIANGLE_TYPE_INIT_STR);
        primeFactorsField.setEnabled(false);
    }

    private void resetTextField(JTextField textField) {
        textField.setText(INITIAL_INVALID_LENGTH_INPUT);
        textField.setEditable(true);
    }

    private void resetErrMsgLabel(JLabel errMsg) {
        errMsg.setVisible(false);
        errMsg.setText(INVALID_INPUT_MSG);
        errMsg.setForeground(Color.RED);
    }

    private void textFieldFocusGained(JTextField textField, int length) {
        String text = textField.getText();
        if (INITIAL_INVALID_LENGTH_INPUT.equalsIgnoreCase(text)) {
            textField.setText(EMPTY_STRING);
            textField.setForeground(Color.BLACK);
        }
    }

    private int textFieldActionPerformed(JTextField textField, JLabel errMsg) {
        String inputStr = textField.getText();
        int value = this.getValidInput(inputStr);

        if (value == -1) {
            errMsg.setText(INVALID_INPUT_MSG);
            errMsg.setForeground(Color.RED);
            errMsg.setVisible(true);
        } else {
            errMsg.setText(VALID_INPUT_MSG);
            errMsg.setForeground(Color.BLACK);
            errMsg.setVisible(true);
        }

        return value;
    }

    private void enableCheckButton() {
        if (inputFactor > 1) {
            calculatePrimeButton.setEnabled(true);
            inputNumberField.setEditable(true);
        } else {
            calculatePrimeButton.setEnabled(false);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame TriClass_GUI_Frame;
    private javax.swing.JButton calculatePrimeButton;
    private javax.swing.JLabel firstLabel;
    private javax.swing.JTextField inputNumberField;
    private javax.swing.JLabel inputNumberMsgLabel;
    private javax.swing.JTextField isPrimeField;
    private javax.swing.JLabel isPrimeLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField primeFactorsField;
    private javax.swing.JLabel primeFactorsLabel;
    private javax.swing.JButton resetButton;
    // End of variables declaration//GEN-END:variables

    private int inputFactor;

    /**
     * check if a positive integer has been entered via inputStr if yes, return
     * that positive integer if no, return -1 to indicate an unsuccessful input
     *
     * @param inputStr an input string
     * @return a positive integer or -1
     */
    public int getValidInput(String inputStr) {

        boolean validInput;
        int inputValue;    // assume invalid input

        try {
            inputValue = Integer.parseInt(inputStr.trim());
            if (inputValue > 1 && inputValue < 2000000001) {
                validInput = true;
            } else  {
                validInput = false;
                inputValue = -1;
            }
        } catch (NumberFormatException ex) {
            validInput = false;
            inputValue = -1;
        }

        // a positive integer has been entered
        return inputValue;
    }

}
